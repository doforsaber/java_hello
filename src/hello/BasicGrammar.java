package hello;

public class BasicGrammar {
	/*
	## Java 基础语法
	一个java程序可以认为是系列对象的集合
	对象: 类的是咧,有状态和行为
	类: 模板 描述类对象的状态和行为`
	 */
	
	public static void main(String []args) {
		/*
		## 第一个Java程序
		输出Hello World```````````````````
		*/
		System.out.println("Hello World!"); //打印 Hello World
		
	}
	
}

/*
 * 对象与类
 * 多态 
 * 继承
 * 封装
 * 抽象
 * 类
 * 对象
 * 实例
 * 方法
 * 重载
 */

/*
 * java 基本数据类型
 * 
 * 内置数据类型
 * java语言提供了八种基本类型.六种数字类型(四个整数型,两个浮点型),
 * 一种字符类型,还有一个布尔型
 * byte:
 * byte 数据类型是8位,有符号的, 以二进制补码表示的整数;
 * 最小值是 -128(-2^7)
 * 最大值是 127(2^7-1)
 * 默认值是 0
 * byte类型用在大型数组中节约空间,主要代替整数,因为byte变量占用的空间
 * 只有int类型的四分之一;
 * 例子: byte a = 100, byte b = -50.
 * short:
 * short数据类型是16位,有符号的以二进制补码表示的整数
 * 最小值是 -32768(-2^15)
 * 最大值是 32767(2^15 - 1)
 * short数据类型也可以像byte那样节省空间.一个short变量是int型变量作占空间的二分之一
 * 默认值是 0
 * 例子: short s = 1000, short r = -20000.
 * int:
 * int数据类型是32位, 有符号的以二进制补码表示的整数;
 * 最小值是 -2,147,483,648(-2^31);
 * 最大值是 2,147,438,547(2^31 - 1)
 * 一般的整型变量默认为int类型;
 * 默认值是 0;
 * 例子: int a = 100000, int b = -200000;
 * long:
 * long数据类型是64位,有符号的以二进制补码表示的整数;
 * 最小值是 -9,223,372,036,854,775,808（-2^63）;
 * 最大值是 9,223,372,036,854,775,807（2^63 -1）;
 * 这种类型主要使用在需要比较大整数的系统上;
 * 默认值是 0L;
 * 例子: long a = 100000L, long b = -200000L.
 * "L"理论上不分大小写,但是ruo写成'l'容易与数字'1'混淆,所以最好大写
 * float: 
 * float数据类型是单精度,32位,符合IEEE754标准的浮点数;
 * float在储存大型浮点数组的时候可节省内存空间;
 * 默认值是0.0f;
 * 浮点数不能用来表示精确的值,如货币
 * 例子: float f1 = 234.5f
 * double:
 * double数据类型是双精度,64位,符合IEEE754标准的浮点数;
 * 浮点数的默认类型为double类型
 * double类型同样不能表示精确的值 如货币
 * 默认值是 0.0d;
 * 例子: double d1 = 123.4
 * boolean:
 * boolean数据类型表示一位的信息;
 * 只有两个取值: true和false;
 * 这种类型只作为一种标志来记录true/false情况
 * 默认值是 false
 * 例子: boolean one = true.
 * char:
 * char类型是一个单一的16位Unicode字符
 * 最小值是 \u0000 即为0
 * 最大值是 \uffff 即为65.535
 * char数据类型可以储存任何字符
 * 例子: char letter = 'A'
 *  
 * 引用数据类型
 * 对象 数组
 * 默认值都是null
 * 例子: Site site = new Site("Runoob")
 */

/*
 * 非访问修饰符
 * 为了实现一些其他的功能,Java也提供了许多非访问修饰符
 * static 修饰符,用来修饰类方法和类变量
 * final修饰符,用来修饰类,方法和变量,final修饰的类不能够被
 * 继承,修饰的方法不能被继承类重新定义,修饰的变量为常亮,是不可修改的.
 * abstract修饰符,用来创建抽象类的抽象方法.
 * synchroized 和volatile 修饰符,主要用于线程的编程.
 * static修饰符
 * 	静态变量:
 * 	static关键字用来声明独立于对象的静态变量,无论一个类实例化多少对象,它的静态变量只有一份
 * 拷贝.静态变量也被称为类变量.局部变量不能被声明为static变量
 *  静态方法
 *  static关键字用来声明独立于对象的静态方法.静态方法不能使用类的非静态变量.静态方法从参数列表得到数据,然后计算这些数据
 *  final 修饰符
 *  final 变量：
 *  final 变量能被显式地初始化并且只能初始化一次。被声明为 final 的对象的引用不能指向不同的对象。但是 final 对象里的数据可以被改变。也就是说 final 对象的引用不能改变，但是里面的值可以改变。
 *  final 修饰符通常和 static 修饰符一起使用来创建类常量。
 *  final方法
 *  类中的final方法可以被子类继承,但是不能被子类修改
 *  声明final方法的主要目的是防止该方法的内容被修改
 *  final类
 *  final类不能被继承,没有类能够继承final类的任何特性
 */

/*
 * Java运算符
 * StringBuffer 线程安全
 * StringBuilder 不是线程安全 效率高
 */














